<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<!-- Level from high to low OFF , FATAL , ERROR , WARN , INFO , DEBUG , TRACE , ALL -->
<!-- Log output rules According to the current ROOT level, when the log output level is higher than the root default level, it will be output -->
<!-- The filter of each configuration below is to filter out the output file, high-level files will appear, and low-level log information will still appear, and only the logs of this level will be recorded through filter filtering -->
<!-- scan When this property is set to true, the configuration file will be reloaded if changed, the default value is true. -->
<!-- scanPeriod Sets the time interval for monitoring whether the configuration file is modified. If no time unit is given, the default unit is milliseconds. This property takes effect when scan is true. The default time interval is 1 minute. -->
<!-- debug When this property is set to true, the internal log information of logback will be printed out, and the running status of logback will be checked in real time. The default value is false. -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 动态日志级别 -->
	<jmxConfigurator />
	<!-- 定义日志文件 输出位置 -->
	<property name="log_dir" value="/shoppingcenter_logs" />
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />
	<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
	<property name="FORMAT" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n" />

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>
				<!-- 设置日志输出格式 -->
				${FORMAT}
			</pattern>
		</encoder>
	</appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录WARN级别的日志 -->
		<!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>ERROR</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>
				${log_dir}/error/%d{yyyy-MM-dd}/error.log
			</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>
				<!-- 设置日志输出格式 -->
				${FORMAT}
			</pattern>
		</encoder>
	</appender>

	<!-- WARN级别日志 appender -->
	<appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录WARN级别的日志 -->
		<!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>WARN</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/warn/%d{yyyy-MM-dd}/warn.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>${FORMAT}</pattern>
		</encoder>
	</appender>

	<!-- INFO级别日志 appender -->
	<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/info/%d{yyyy-MM-dd}/info.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>${FORMAT}</pattern>
		</encoder>
	</appender>

	<!-- DEBUG级别日志 appender -->
	<appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log_dir}/debug/%d{yyyy-MM-dd}/debug.log</fileNamePattern>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>${FORMAT}</pattern>
		</encoder>
	</appender>

	<!-- root级别 -->
	<root>
		<!-- 只有该级别日志及以上级别日志才会输出到指定渠道 -->
		<!-- 测试：debug。上生产环境时，需要改成info或error -->
		<level value="INFO" />
		<!-- 控制台输出渠道 -->
		<appender-ref ref="console" />
		<!-- 文件输出渠道 -->
		<appender-ref ref="ERROR" />
		<appender-ref ref="INFO" />
		<appender-ref ref="WARN" />
		<appender-ref ref="DEBUG" />
	</root>
</configuration>